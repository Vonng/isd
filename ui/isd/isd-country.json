{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "description": "ISD Country Summary",
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 52,
  "links": [
    {
      "asDropdown": true,
      "icon": "external link",
      "includeVars": false,
      "keepTime": false,
      "tags": [
        "ISD"
      ],
      "targetBlank": false,
      "title": "ISD",
      "tooltip": "",
      "type": "dashboards",
      "url": ""
    }
  ],
  "liveNow": false,
  "panels": [
    {
      "datasource": {
        "type": "postgres",
        "uid": "ds-meta"
      },
      "fieldConfig": {
        "defaults": {
          "custom": {
            "align": "center",
            "cellOptions": {
              "type": "auto"
            },
            "filterable": false,
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Station"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 120
              },
              {
                "id": "links",
                "value": [
                  {
                    "title": "station ${__data.fields[station]}",
                    "url": "/d/isd-station?var-station=${__data.fields[station]}"
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Distance"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 100
              },
              {
                "id": "unit",
                "value": "lengthm"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Country"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 74
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Location"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 238
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Elevation"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 70
              },
              {
                "id": "unit",
                "value": "lengthm"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "First Seen"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 100
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Last Seen"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 100
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 18,
        "w": 12,
        "x": 0,
        "y": 0
      },
      "id": 3,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": []
      },
      "pluginVersion": "10.0.1",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "ds-meta"
          },
          "editorMode": "code",
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT station, name, \n       country, ST_AsLatLonText(location) AS location, elevation, begin_date::TEXT AS start, end_date::TEXT AS end\nFROM isd.station h\nWHERE country = '$fips';",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "longitude"
                ],
                "type": "column"
              }
            ]
          ],
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "china_railway",
          "timeColumn": "crawled_time",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Stations",
      "transformations": [
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "country": true
            },
            "indexByName": {},
            "renameByName": {
              "country": "Country",
              "distance": "Distance",
              "elevation": "Elevation",
              "end": "Last Seen",
              "location": "Location",
              "name": "Name",
              "start": "First Seen",
              "station": "Station"
            }
          }
        }
      ],
      "type": "table"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "ds-meta"
      },
      "gridPos": {
        "h": 18,
        "w": 12,
        "x": 12,
        "y": 0
      },
      "id": 2,
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "auto",
          "height": 600
        },
        "gaode": {
          "key": "",
          "plugin": "AMap.Scale,AMap.ToolBar"
        },
        "getOption": "// data: extract and transform grafana data\nfunction parse_grafana_data(d) {\n  var rawData = []\n  if (data.series[0].fields[0].values.buffer === undefined) {\n    rawData = d.series[0].fields.map((e) => {\n      return e.values\n    })\n  } else { // large dataset will have their data inside a buffer\n    rawData = d.series[0].fields.map((e) => {\n      return e.values.buffer\n    })\n  }\n  var nDim = rawData.length\n  var nItem = rawData[0].length\n  var result = []\n  for (var i = 0; i < nItem; i++) {    // item\n    result[i] = []\n    for (var j = 0; j < nDim; j++) {  // dimension\n      result[i][j] = rawData[j][i]\n    }\n  }\n  return result\n}\n\nvar mapData = parse_grafana_data(data)\n\n// iterate through data to find the center of the map\nvar sumLat = 0\nvar sumLon = 0\nvar minLat = 0\nvar maxLat = 90\nvar minLon = -180\nvar maxLon = 180\nfor (var i = 0; i < mapData.length; i++) {\n  sumLat += mapData[i][1]\n  sumLon += mapData[i][0]\n  if (mapData[i][1] < maxLat) {\n    maxLat = mapData[i][1]\n  }\n  if (mapData[i][1] > minLat) {\n    minLat = mapData[i][1]\n  }\n  if (mapData[i][0] < maxLon) {\n    maxLon = mapData[i][0]\n  }\n  if (mapData[i][0] > minLon) {\n    minLon = mapData[i][0]\n  }\n}\n\nvar center = [sumLon / mapData.length, sumLat / mapData.length]\n\n// event: resize after window resize\nwindow.onresize = function () {\n  echartsInstance.resize()\n}\n\n// event: reset symbol size on geo zoom\nechartsInstance.on(\"georoam\", function (params) {\n  var zoomLevel = echartsInstance.getOption().geo[0].zoom\n  var symbolSize = 3 * Math.sqrt(zoomLevel)\n  echartsInstance.setOption({\n    series: [{ symbolSize: symbolSize }]\n  })\n});\n\n// event: jump to station main page when click symbol\nechartsInstance.on(\"click\", { seriesName: 'station' }, function (params) {\n  window.location = '/d/isd-station?var-station=' + params.data[4]\n})\n\n// final option\nvar option = {\n  title: {\n    text: 'World Integrated Surface Stations', subtext: 'Click station mark for detail info', top: '2%', right: '2%'\n  }, geo: {\n    map: 'world', show: true, center: center, zoom: 8, roam: true\n  }, visualMap: {\n    show: false, left: 'right', min: 0, max: 2, inRange: {\n      color: ['#A0A4AA', '#8AB8FF', '#73BF7B']\n    }, text: ['Active', 'Silent'], calculable: true\n  }, series: [{\n    type: 'scatter',\n    name: 'station',\n    coordinateSystem: 'geo',\n    symbol: 'circle',\n    symbolSize: 10,\n    data: mapData,\n    label: {\n      fontFamily: 'sans-serif', formatter: function (param) {\n        var pasca = param.value[6]\n        if (pasca != null) {\n          pasca = Math.round(pasca / 10)\n        } else {\n          pasca = 'N/A '\n        }\n        return \"\" + '{a|' + param.value[3] + '}\\n'            // station name\n          + '{b|Station : ' + param.value[4] + '}\\n'  // station id\n          + '{b|Location: (' + param.value[0] + ', ' + param.value[1] + ', ' + param.value[2] + ')}\\n' // location\n          + '{b|Country : ' + param.value[6] + '}\\n'  // Country\n          + '{b|LastSeen: ' + param.value[5] + '}\\n'  // Last Update Time\n      }, rich: {\n        a: {\n          color: 'blue', fontSize: 14, fontWeight: 'bold', lineHeight: 22\n        }, b: {\n          lineHeight: 12, color: 'black'\n        },\n      }, position: 'right', show: false\n    },\n    emphasis: {\n      label: {\n        show: true\n      }\n    }\n  }]\n};\n\nreturn option;",
        "google": {
          "callback": "gmapReady",
          "key": ""
        },
        "map": "json",
        "renderer": "canvas",
        "themeEditor": {
          "config": "{}",
          "height": 400,
          "name": "default"
        }
      },
      "pluginVersion": "7.1.3",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "ds-meta"
          },
          "editorMode": "code",
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT longitude,latitude,elevation,name,station,upper(period)::DATE::TEXT AS mtime,country,\n       CASE\n           WHEN upper(period) >= date_trunc('month', CURRENT_DATE) THEN 2\n           WHEN upper(period) >= date_trunc('year', CURRENT_DATE) THEN 1\n           ELSE 0 END AS category -- 0 active in this month, 1 active in this year, 0 default\nFROM isd.station\nWHERE period && daterange($__timeFrom()::DATE, $__timeTo()::DATE) AND country = '$fips';",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "longitude"
                ],
                "type": "column"
              }
            ]
          ],
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "china_railway",
          "timeColumn": "crawled_time",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "$country Stations",
      "type": "volkovlabs-echarts-panel"
    }
  ],
  "refresh": "",
  "schemaVersion": 38,
  "style": "dark",
  "tags": [
    "ISD",
    "APP"
  ],
  "templating": {
    "list": [
      {
        "current": {
          "selected": false,
          "text": "China",
          "value": "China"
        },
        "datasource": {
          "type": "postgres",
          "uid": "ds-meta"
        },
        "definition": "SELECT name_en FROM isd.world WHERE fips IS NOT NULL;",
        "description": "Show Country in English",
        "hide": 0,
        "includeAll": false,
        "label": "Country",
        "multi": false,
        "name": "country",
        "options": [],
        "query": "SELECT name_en FROM isd.world WHERE fips IS NOT NULL;",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "current": {
          "selected": false,
          "text": "CH",
          "value": "CH"
        },
        "datasource": {
          "type": "postgres",
          "uid": "ds-meta"
        },
        "definition": "SELECT fips FROM isd.world WHERE name_en = '${country}'",
        "description": "FIPS code used by NOAA",
        "hide": 1,
        "includeAll": false,
        "label": "FIPS",
        "multi": false,
        "name": "fips",
        "options": [],
        "query": "SELECT fips FROM isd.world WHERE name_en = '${country}'",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      }
    ]
  },
  "time": {
    "from": "now-120y",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "",
  "title": "ISD Country",
  "uid": "isd-country",
  "version": 13,
  "weekStart": ""
}
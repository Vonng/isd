#!/usr/bin/env bash
set -uo pipefail
#==============================================================#
# File      :   dump-stable
# Ctime     :   2020-11-03
# Mtime     :   2023-06-24
# Desc      :   dump isd daily stable to data/daily.csv.gz
# Path      :   bin/dump-stable
# Author    :   Vonng(fengruohang@outlook.com)
# Depend    :   curl,pv,psql
#==============================================================#


#--------------------------------------------------------------#
# Param
#--------------------------------------------------------------#
# specify target database connection string with PGURL
PGURL=${1-'postgres:///'}

PROG_DIR="$(cd $(dirname $0) && pwd)"
PROG_NAME="$(basename $0)"
PROJ_DIR=$(dirname $PROG_DIR)
DATA_DIR="${PROJ_DIR}/data"
DATA_FILE="${DATA_DIR}/daily.csv.gz"


#--------------------------------------------------------------#
# Utils
#--------------------------------------------------------------#
__CN='\033[0m';__CB='\033[0;30m';__CR='\033[0;31m';__CG='\033[0;32m';
__CY='\033[0;33m';__CB='\033[0;34m';__CM='\033[0;35m';__CC='\033[0;36m';__CW='\033[0;37m';
function log_info() {  printf "[${__CG} OK ${__CN}] ${__CG}$*${__CN}\n";   }
function log_warn() {  printf "[${__CY}WARN${__CN}] ${__CY}$*${__CN}\n";   }
function log_error() { printf "[${__CR}FAIL${__CN}] ${__CR}$*${__CN}\n";   }
function log_debug() { printf "[${__CB}HINT${__CN}] ${__CB}$*${__CN}\n"; }
function log_input() { printf "[${__CM} IN ${__CN}] ${__CM}$*\n=> ${__CN}"; }
function log_hint()  { printf "${__CB}$*${__CN}"; }


#--------------------------------------------------------------#
# Check
#--------------------------------------------------------------#
# if not found, exit
if [[ -f ${DATA_FILE} ]]; then
    log_warn "dump data path not empty: ${DATA_FILE}"
    exit 1
fi

if ! psql ${PGURL} -AXtwqc 'SELECT 1'; then
    log_error "failed to connect to database: ${PGURL}"
    exit 2
fi


#--------------------------------------------------------------#
# Dump
#--------------------------------------------------------------#
# warn your about overwrite
log_info "dump isd.daily to data/daily.csv.gz.tmp"
psql ${PGURL} -c 'COPY (SELECT * FROM isd.daily WHERE ts < $$2023-01-01$$::DATE ORDER BY station,ts) TO STDOUT CSV HEADER' | gzip -9 - > ${DATA_FILE}.tmp

# ask for confirmation to remove old data
if [[ -f "${DATA_FILE}" ]]; then
    log_input "Remove ${DATA_FILE} (y/n):"
    read -r
    local reply=$(echo "$REPLY" | tr '[:upper:]' '[:lower:]')
    case "${reply}" in
        y|yes|ok|true|aye|on)
          rm -rf ${DATA_FILE}
          echo "$ mv ${DATA_FILE}.tmp ${DATA_FILE}"
          mv ${DATA_FILE}.tmp ${DATA_FILE}
        ;;
        *)
          echo "$ mv ${DATA_FILE}.tmp ${DATA_FILE}"
    esac
else
    echo "$ mv ${DATA_FILE}.tmp ${DATA_FILE}"
    mv ${DATA_FILE}.tmp ${DATA_FILE}
fi
#!/usr/bin/env bash
set -uo pipefail
#==============================================================#
# File      :   load-daily
# Desc      :   load this year's isd.daily from data/
# Ctime     :   2020-11-03
# Mtime     :   2023-06-23
# Path      :   bin/load-daily
# Author    :   Ruohang Feng (rh@vonng.com)
# License   :   Apache-2.0
#==============================================================#


#--------------------------------------------------------------#
# Usage
#--------------------------------------------------------------#
# bin/load-daily [pgurl=postgres:///] [year=this-year]
# bin/load-daily
# bin/load-daily postgres:///isd
# bin/load-daily postgres:/// 2020


#--------------------------------------------------------------#
# Param
#--------------------------------------------------------------#
PGURL=${1-'postgres:///'}
year=${2-$(date '+%Y')}

PROG_DIR="$(cd $(dirname $0) && pwd)"
PROG_NAME="$(basename $0)"
PROJ_DIR=$(dirname $PROG_DIR)
PARSER="${PROJ_DIR}/bin/isd"
DATA_DIR="${PROJ_DIR}/data/daily"
DATA_FILE="${DATA_DIR}/${year}.tar.gz"
next_year=$((year+1))


#--------------------------------------------------------------#
# Utils
#--------------------------------------------------------------#
__CN='\033[0m';__CB='\033[0;30m';__CR='\033[0;31m';__CG='\033[0;32m';
__CY='\033[0;33m';__CB='\033[0;34m';__CM='\033[0;35m';__CC='\033[0;36m';__CW='\033[0;37m';
function log_info() {  printf "[${__CG} OK ${__CN}] ${__CG}$*${__CN}\n";   }
function log_warn() {  printf "[${__CY}WARN${__CN}] ${__CY}$*${__CN}\n";   }
function log_error() { printf "[${__CR}FAIL${__CN}] ${__CR}$*${__CN}\n";   }
function log_debug() { printf "[${__CB}HINT${__CN}] ${__CB}$*${__CN}\n"; }
function log_input() { printf "[${__CM} IN ${__CN}] ${__CM}$*\n=> ${__CN}"; }
function log_hint()  { printf "${__CB}$*${__CN}"; }


#--------------------------------------------------------------#
# Check
#--------------------------------------------------------------#
# check if given url is a number
if [[ ${PGURL} =~ ^[0-9]+$ ]]; then
    log_error "pgurl ${PGURL} looks like a year number, are your sure?"
    log_hint "bin/load-daily [PGURL=postgres:///] [YEAR=${year}]"
    exit 1
fi

if (( year > 2024 )); then
    log_info "year ${year} overflow"
    exit 2
fi

if (( year < 1900 )); then
    log_info "year ${year} underflow"
    exit 3
fi

if ! psql ${PGURL} -AXtwqc 'SELECT 1'; then
    log_error "failed to connect to database: ${PGURL}"
    exit 4
fi

# check PARSER exists and is executable
if [[ ! -x ${PARSER} ]]; then
    log_error "parser not found: ${PARSER}"
    log_hint "get parser with: make get-parser"
    exit 4
fi

# check data file exists
if [[ ! -f ${DATA_FILE} ]]; then
    log_error "data file not found: ${DATA_FILE}"
    log_hint "get data file with: make get-daily, or bin/get-daily ${year}"
    exit 5
fi


#--------------------------------------------------------------#
# Main
#--------------------------------------------------------------#

# get year record count
sql="SELECT count(*) FROM isd.daily WHERE ts >= '${year}-01-01' AND ts < '${next_year}-01-01';"
count=$(psql ${PGURL} -AXtwqc "${sql}")
log_info "year ${year} has ${count} records"

# delete year records
log_warn "DELETE FROM isd.daily WHERE ts >= '${year}-01-01' AND ts < '${next_year}-01-01';"
sql="DELETE FROM isd.daily WHERE ts >= '${year}-01-01' AND ts < '${next_year}-01-01';"
psql ${PGURL} -AXtwqc "${sql}"

# vacuum and reclaim space
log_info "VACUUM isd.daily"
psql ${PGURL} -AXtwqc 'VACUUM isd.daily;'

# parse and load isd.daily data of this year
log_info "parser=${PARSER}, input=${DATA_DIR}/${year}.tar.gz"
${PARSER} daily -v -i "${DATA_DIR}/${year}.tar.gz" | psql ${PGURL} -AXtwqc "COPY isd.daily FROM STDIN CSV;"

# get year record count again
sql="SELECT count(*) FROM isd.daily WHERE ts >= '${year}-01-01' AND ts < '${next_year}-01-01';"
count2=$(psql ${PGURL} -AXtwqc "${sql}")

log_info "load isd.daily for year ${year} complete: from ${count} to ${count2} records"